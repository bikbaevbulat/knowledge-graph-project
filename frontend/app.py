import streamlit as st
import requests
import time
from pyvis.network import Network
import streamlit.components.v1 as components
import os
import mgclient

API_URL = os.getenv("API_URL", "http://localhost:8000")

st.set_page_config(layout="wide")
st.title("üîç –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –Ω–∞ –≥—Ä–∞—Ñ–∞—Ö –∑–Ω–∞–Ω–∏–π")

if "token" not in st.session_state:
    st.session_state.token = None

def auth_headers():
    return {"Authorization": f"Bearer {st.session_state.token}"}

# –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
def login():
    st.subheader("–í—Ö–æ–¥ –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
    username = st.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")

    if st.button("–í–æ–π—Ç–∏"):
        r = requests.post(f"{API_URL}/login", json={"username": username, "password": password})
        if r.status_code == 200:
            st.session_state.token = r.json()["access_token"]
            st.rerun()
        else:
            st.error("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞")

    if st.button("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"):
        r = requests.post(f"{API_URL}/register", json={"username": username, "password": password})
        if r.status_code == 200:
            st.success("–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è. –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ.")
        else:
            st.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")


def render_graph():
    with st.spinner("–†–∏—Å—É–µ–º –≥—Ä–∞—Ñ..."):
        conn = mgclient.connect(host="memgraph", port=7687)
        cursor = conn.cursor()
        cursor.execute("MATCH (a)-[r]->(b) RETURN a.name, type(r), b.name")
        rows = cursor.fetchall()
        print('–ø–æ–ª—É—á–µ–Ω–æ –∏–∑ memgraph', rows)
        net = Network(height="500px", width="100%", notebook=False)
        for src, rel, tgt in rows:
            net.add_node(src, label=src)
            net.add_node(tgt, label=tgt)
            net.add_edge(src, tgt, label=rel)

        net.save_graph("graph.html")
        components.html(open("graph.html", "r", encoding="utf-8").read(), height=550)



if not st.session_state.token:
    login()
    st.stop()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –≤—ã–±–æ—Ä –≥—Ä–∞—Ñ–æ–≤
st.sidebar.header("–ì—Ä–∞—Ñ –∑–Ω–∞–Ω–∏–π")
r = requests.get(f"{API_URL}/graphs/", headers=auth_headers())
graphs = r.json()
graph_titles = [g["title"] for g in graphs]
graph_ids = [g["id"] for g in graphs]

if graph_ids:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, –µ—Å–ª–∏ –∫–ª—é—á–∞ –µ—â–µ –Ω–µ—Ç
    if "selected_graph" not in st.session_state or st.session_state.selected_graph not in graph_ids:
        st.session_state.selected_graph = graph_ids[0]

    # –ù–∞–π–¥–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è selectbox, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
    default_index = graph_ids.index(st.session_state.selected_graph)
    selected_graph = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–∞—Ñ", graph_titles, index=default_index)

    # –û–±–Ω–æ–≤–ª—è–µ–º st.session_state.selected_graph –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∞
    new_selected_graph_id = graph_ids[graph_titles.index(selected_graph)]
    if new_selected_graph_id != st.session_state.selected_graph:
        st.session_state.selected_graph = new_selected_graph_id
else:
    st.sidebar.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä–∞—Ñ–æ–≤. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –≥—Ä–∞—Ñ.")
    st.session_state.selected_graph = None


# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥—Ä–∞—Ñ–∞
st.sidebar.subheader("–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∞")
new_graph = st.sidebar.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥—Ä–∞—Ñ–∞")
if st.sidebar.button("–°–æ–∑–¥–∞—Ç—å"):
    r = requests.post(f"{API_URL}/graphs/", json={"title": new_graph}, headers=auth_headers())
    if r.status_code == 200:
        st.sidebar.success("–ì—Ä–∞—Ñ —Å–æ–∑–¥–∞–Ω!")
        st.rerun()
    else:
        st.sidebar.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏")

# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞
st.subheader("üìÑ –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∞")
text = st.text_area("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç")
if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ"):
    graph_id = st.session_state.get("selected_graph")
    if graph_id is None:
        st.error("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–∞—Ñ –ø–µ—Ä–µ–¥ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ–º.")
        st.stop()

    try:
        graph_id = int(graph_id)
    except ValueError:
        st.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≥—Ä–∞—Ñ–∞.")
        st.stop()

    r = requests.post(f"{API_URL}/process_text/", json={
        "text": text,
        "graph_id": graph_id
    }, headers=auth_headers())

    if r.status_code == 200:
        st.success("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...")
        time.sleep(70)
        render_graph()  # üëà –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≥—Ä–∞—Ñ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è
    else:
        st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–∞")

# –ü–æ–∏—Å–∫
st.subheader("üîé –ü–æ–∏—Å–∫ –ø–æ –≥—Ä–∞—Ñ—É")
query = st.text_input("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å")
if st.button("–ü–æ–∏—Å–∫"):
    r = requests.post(f"{API_URL}/search/", json={
        "query": query,
        "graph_id": st.session_state.selected_graph
    }, headers=auth_headers())

    if r.status_code == 200:
        task_id = r.json()["task_id"]
        st.success("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ñ–¥—ë–º –æ—Ç–≤–µ—Ç–∞...")

        # –û–∂–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞..."):
            answer = None
            for _ in range(30):  # –º–∞–∫—Å–∏–º—É–º 30 –ø–æ–ø—ã—Ç–æ–∫ (60 —Å–µ–∫ –ø—Ä–∏ sleep 2)
                res = requests.get(f"{API_URL}/search_result/{task_id}")
                data = res.json()

                if data["status"] == "SUCCESS":
                    answer = data.get("answer", "–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    break
                elif data["status"] == "FAILURE":
                    st.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.")
                    break
                else:
                    time.sleep(1)

            if answer:
                st.markdown("**üß† –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å:**")
                st.text_area("–û—Ç–≤–µ—Ç", value=answer, height=200)

    else:
        st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞")