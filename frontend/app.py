import streamlit as st

st.set_page_config(
    layout="wide",
    page_title="–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –Ω–∞ –≥—Ä–∞—Ñ–∞—Ö –∑–Ω–∞–Ω–∏–π",
    page_icon=":material/network_node:",
    menu_items={
        'Get Help': None,
        'Report a bug': None,
        'About': None
    }
)

import requests
import time
from pyvis.network import Network
import streamlit.components.v1 as components
import os
import mgclient
from datetime import datetime
from streamlit_cookies_manager import EncryptedCookieManager
from jose import JWTError, jwt
import asyncio
import websockets
import json
from bs4 import BeautifulSoup
import fitz  # PyMuPDF
import docx
import re
import random

API_URL = os.getenv("API_URL", "http://localhost:8000")
cookies = EncryptedCookieManager(prefix="myapp_", password="esfgrrgerfewfwewef")

if not cookies.ready():
    st.stop()



st.title("üîç –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –Ω–∞ –≥—Ä–∞—Ñ–∞—Ö –∑–Ω–∞–Ω–∏–π")

# –ß–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ cookie –∏–ª–∏ –∏–∑ session_state
if "token" not in st.session_state:
    st.session_state.token = cookies.get("token", None)
    if st.session_state.token:
        decoded_token = jwt.decode(st.session_state.token, key="secret", options={"verify_signature": False})
        is_admin = decoded_token.get("is_admin", False)
        st.session_state["is_admin"] = is_admin

if "show_graph" not in st.session_state:
    st.session_state.show_graph = False

def save_token(token: str, refresh_token: str):
    st.session_state.token = token
    st.session_state.refresh_token = refresh_token
    cookies["token"] = token
    cookies["refresh_token"] = refresh_token
    cookies.save()

def clear_token():
    st.session_state.token = None
    cookies["token"] = ""
    cookies.save()

def is_token_expired(token: str):
    try:
        payload = jwt.decode(token, options={"verify_signature": False})
        exp = payload.get("exp")
        if exp and datetime.utcfromtimestamp(exp) < datetime.utcnow():
            return True
        return False
    except:
        return True
    
def auth_headers():
    return {"Authorization": f"Bearer {st.session_state.token}"}

# –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
def login():
    st.subheader("–í—Ö–æ–¥ –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
    username = st.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")

    if st.button("–í–æ–π—Ç–∏"):
        r = requests.post(f"{API_URL}/login", json={"username": username, "password": password})
        if r.status_code == 200:
            st.session_state.token = r.json()["access_token"]
            st.session_state.refresh_token = r.json()["refresh_token"]
            refresh_token = r.json()["refresh_token"]
            decoded_token = jwt.decode(r.json()["access_token"], key="secret", options={"verify_signature": False})
            is_admin = decoded_token.get("is_admin", False)
            st.session_state["is_admin"] = is_admin
            save_token(st.session_state.token, refresh_token)
            st.rerun()
        else:
            st.error("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞")

    if st.button("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"):
        r = requests.post(f"{API_URL}/register", json={"username": username, "password": password})
        if r.status_code == 200:
            st.success("–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è. –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ.")
        else:
            st.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")

def logout():
    clear_token()
    st.rerun()

def get_color_for_types(types):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å type -> —Ü–≤–µ—Ç (hex)"""
    colors = {}
    for t in types:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ü–≤–µ—Ç –≤ hex —Ñ–æ—Ä–º–∞—Ç–µ
        colors[t] = "#{:06x}".format(random.randint(0, 0xFFFFFF))
    return colors

def render_graph(graph_id: int, placeholder: st.delta_generator.DeltaGenerator):

    show_schema = st.checkbox("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ö–µ–º—É —Ç–∏–ø–æ–≤", value=False)

    with st.spinner("–†–∏—Å—É–µ–º –≥—Ä–∞—Ñ..."):
        conn = mgclient.connect(host="memgraph", port=7687)
        cursor = conn.cursor()
        cursor.execute(
            """
            MATCH (a:Entity {graph_id: $graph_id})-[r]->(b:Entity {graph_id: $graph_id})
            RETURN a.name, type(r), b.name
            """,
            {"graph_id": graph_id}
        )
        rows = cursor.fetchall()
        print('–ø–æ–ª—É—á–µ–Ω–æ –∏–∑ memgraph', rows)

        if not rows:
            with placeholder:
                st.info("–í —ç—Ç–æ–º –≥—Ä–∞—Ñ–µ –∑–Ω–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
    
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–∑–ª—ã —Å —Ç–∏–ø–∞–º–∏
        cursor.execute(
            """
            MATCH (n:Entity {graph_id: $graph_id})
            RETURN n.name, n.type
            """,
            {"graph_id": graph_id}
        )
        nodes = cursor.fetchall()
        print('–ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–∑–ª—ã —Å —Ç–∏–ø–∞–º–∏', nodes)

        name_to_type = {}
        for row in nodes:
            if len(row) != 2:
                print("‚ö†Ô∏è Unexpected row format:", row)
                continue
            name, ntype = row
            name_to_type[name] = ntype or "–î—Ä—É–≥–æ–µ"
        all_types = sorted(set(name_to_type.values()))


        # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É —Ç–∏–ø—É —Å–≤–æ–π —Ü–≤–µ—Ç
        type_colors = get_color_for_types(all_types)

        edge_color = "#878D95"
        net = Network(height="500px", width="100%", notebook=False, directed=True)





        if show_schema:
            # –°—Ö–µ–º–∞ —Ç–∏–ø–æ–≤
            edge_types = set()
            for src, rel, tgt in rows:
                src_type = name_to_type.get(src, "–î—Ä—É–≥–æ–µ")
                tgt_type = name_to_type.get(tgt, "–î—Ä—É–≥–æ–µ")
                if src_type != tgt_type:
                    edge_types.add((src_type, rel, tgt_type))

            for t in all_types:
                net.add_node(t, label=t, shape="box", color=type_colors[t])

            for src_t, rel, tgt_t in edge_types:
                net.add_edge(src_t, tgt_t, label=rel, arrows="to", color=edge_color)

        else:
            # –û–±—ã—á–Ω—ã–π –≥—Ä–∞—Ñ: —Å—É—â–Ω–æ—Å—Ç–∏ –∏ —Å–≤—è–∑–∏
            for src, rel, tgt in rows:
                try:
                    if not isinstance(src, (str, int)):
                        continue
                    if not isinstance(tgt, (str, int)):
                        continue

                    net.add_node(src, label=src, color=type_colors.get(name_to_type.get(src, "–î—Ä—É–≥–æ–µ")))
                    net.add_node(tgt, label=tgt, color=type_colors.get(name_to_type.get(tgt, "–î—Ä—É–≥–æ–µ")))
                    net.add_edge(src, tgt, label=rel, arrows="to", color=edge_color)
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–±—Ä–∞ {src} ‚Üí {tgt}: {e}")
            
        net.save_graph("graph.html")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º placeholder –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≥—Ä–∞—Ñ–∞ –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ
        with placeholder:
            components.html(open("graph.html", "r", encoding="utf-8").read(), height=550)

        st.session_state.show_graph = True
        st.session_state.last_graph_id = graph_id


async def wait_for_graph_and_render(task_id, graph_id):
    placeholder = st.empty()
    uri = f"ws://backend:8000/ws/graph/{task_id}"  # –∞–¥—Ä–µ—Å WebSocket FastAPI

    try:
        async with websockets.connect(uri) as websocket:
            placeholder.info("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏...")

            while True:
                message = await websocket.recv()
                data = json.loads(message)

                status = data.get("status")
                chunks_total = data.get("chunks_total")
                chunks_done = data.get("chunks_done")
                if status == "SUCCESS":
                    placeholder.success("‚úÖ –ì—Ä–∞—Ñ –ø–æ—Å—Ç—Ä–æ–µ–Ω!")
                    render_graph(graph_id, graph_placeholder)
                    break
                elif status == "FAILURE":
                    placeholder.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∞.")
                    break
                else:
                    placeholder.info(f"‚è≥ –°—Ç–∞—Ç—É—Å: {status}, –í—Å–µ–≥–æ —á–∞—Å—Ç–µ–π —Ç–µ–∫—Å—Ç–∞: {chunks_total}, –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–∞—Å—Ç–µ–π —Ç–µ–∫—Å—Ç–∞: {chunks_done}")
    except Exception as e:
        placeholder.error(f"–û—à–∏–±–∫–∞ WebSocket: {str(e)}")

async def wait_answer(task_id: str, graph_id: int):
    uri = f"ws://backend:8000/ws/answer/{task_id}"
    try:
        async with websockets.connect(uri) as websocket:
            with st.spinner("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞..."):
                while True:
                    msg = await websocket.recv()
                    data = json.loads(msg)
                    if data["status"] == "SUCCESS":
                        st.markdown("**üß† –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å:**")
                        st.text_area("–û—Ç–≤–µ—Ç", value=data["answer"], height=200)
                        break
                    elif data["status"] == "FAILURE":
                        st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")
                        break
                    else:
                        st.info(f"–°—Ç–∞—Ç—É—Å: {data['status']}")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ WebSocket: {e}")


def extract_text_from_pdf(file):
    doc = fitz.open(stream=file.read(), filetype="pdf")
    text = "\n".join([page.get_text() for page in doc])
    return text

def extract_text_from_docx(file):
    doc = docx.Document(file)
    text = "\n".join([para.text for para in doc.paragraphs])
    return text

def extract_text_from_url(url):
    try:
        r = requests.get(url)
        soup = BeautifulSoup(r.text, 'html.parser')
        # –£–±–∏—Ä–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã –∏ —Å—Ç–∏–ª–∏
        for s in soup(["script", "style"]):
            s.decompose()
        text = soup.get_text()
        return re.sub(r'\s+', ' ', text.strip())
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}"


if not st.session_state.token:
    login()
    st.stop()



# –í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
nav_options = ["–ü–æ–∏—Å–∫", "–ò—Å—Ç–æ—Ä–∏—è"]
if st.session_state.get("is_admin"):
    nav_options.append("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
page = st.sidebar.radio("–ù–∞–≤–∏–≥–∞—Ü–∏—è", nav_options)



if page == "–ü–æ–∏—Å–∫":
    graph_placeholder = st.empty()
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –≤—ã–±–æ—Ä –≥—Ä–∞—Ñ–æ–≤
    st.sidebar.header("–ì—Ä–∞—Ñ –∑–Ω–∞–Ω–∏–π")
    r = requests.get(f"{API_URL}/graphs/", headers=auth_headers())
    graphs = r.json()
    graph_titles = [g["title"] for g in graphs]
    graph_ids = [g["id"] for g in graphs]
    graph_is_tatar = [g["is_tatar"] for g in graphs]

    if graph_ids:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, –µ—Å–ª–∏ –∫–ª—é—á–∞ –µ—â–µ –Ω–µ—Ç
        if "selected_graph" not in st.session_state or st.session_state.selected_graph not in graph_ids:
            st.session_state.selected_graph = graph_ids[0]

        # –ù–∞–π–¥–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è selectbox, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        default_index = graph_ids.index(st.session_state.selected_graph)
        selected_graph = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–∞—Ñ", graph_titles, index=default_index)

        # –û–±–Ω–æ–≤–ª—è–µ–º st.session_state.selected_graph –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∞
        new_selected_graph_id = graph_ids[graph_titles.index(selected_graph)]
        if new_selected_graph_id != st.session_state.selected_graph:
            st.session_state.selected_graph = new_selected_graph_id
            st.session_state.last_graph_id = new_selected_graph_id
            st.rerun()  # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        selected_index = graph_ids.index(new_selected_graph_id)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ —è–∑—ã–∫
        if graph_is_tatar[selected_index]:
            st.write("–Ø–∑—ã–∫ –≥—Ä–∞—Ñ–∞: —Ç–∞—Ç–∞—Ä—Å–∫–∏–π")
        else:
            st.write("–Ø–∑—ã–∫ –≥—Ä–∞—Ñ–∞: —Ä—É—Å—Å–∫–∏–π")

        # –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞
        if st.sidebar.button("–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥—Ä–∞—Ñ"):
            graph_id_to_delete = st.session_state.selected_graph
            if graph_id_to_delete is not None:
                r = requests.delete(f"{API_URL}/graphs/{graph_id_to_delete}", headers=auth_headers())
                if r.status_code == 204:
                    st.sidebar.success(f"–ì—Ä–∞—Ñ '{selected_graph}' —É–¥–∞–ª—ë–Ω")
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
                    r = requests.get(f"{API_URL}/graphs/", headers=auth_headers())
                    graphs = r.json()
                    graph_titles = [g["title"] for g in graphs]
                    graph_ids = [g["id"] for g in graphs]
                    if st.session_state.selected_graph not in graph_ids:
                        st.session_state.selected_graph = graph_ids[0] if graph_ids else None
                    st.rerun()
                else:
                    st.sidebar.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∞")
    else:
        st.sidebar.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä–∞—Ñ–æ–≤. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –≥—Ä–∞—Ñ.")
        st.session_state.selected_graph = None


    # –û—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç—Ä–∏—Å–æ–≤–∫–æ–π –ø–æ–ª—è
    if st.session_state.get("clear_new_graph_title", False):
        st.session_state["new_graph_title"] = ""
        st.session_state["clear_new_graph_title"] = False

    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥—Ä–∞—Ñ–∞
    st.sidebar.subheader("–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∞")
    new_graph = st.sidebar.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥—Ä–∞—Ñ–∞", key="new_graph_title")
    is_tatar = st.sidebar.checkbox("–¢–∞—Ç–∞—Ä—Å–∫–∏–π —è–∑—ã–∫", value=False)

    if st.sidebar.button("–°–æ–∑–¥–∞—Ç—å"):
        payload = {
        "title": new_graph,
        "is_tatar": is_tatar
        }
        r = requests.post(f"{API_URL}/graphs/", json=payload, headers=auth_headers())
        if r.status_code == 200:
            st.sidebar.success("–ì—Ä–∞—Ñ —Å–æ–∑–¥–∞–Ω!")
            st.session_state["clear_new_graph_title"] = True
            st.rerun()
        else:
            st.sidebar.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏")

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞
    if st.button("–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –≥—Ä–∞—Ñ –∑–Ω–∞–Ω–∏–π"):
        graph_id = st.session_state.get("selected_graph")
        if graph_id is None:
            st.error("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–∞—Ñ –ø–µ—Ä–µ–¥ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ–º.")
            st.stop()
        graph_id = int(graph_id)
        render_graph(graph_id, graph_placeholder)
    st.subheader("üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–ª–∏ –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –≥—Ä–∞—Ñ")
    upload_method = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∑–∞–≥—Ä—É–∑–∫–∏", ["–í–≤–æ–¥ –≤—Ä—É—á–Ω—É—é", "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞", "–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç"])

    text = ""

    if upload_method == "–í–≤–æ–¥ –≤—Ä—É—á–Ω—É—é":
        text = st.text_area("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç")

    elif upload_method == "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞":
        file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ PDF –∏–ª–∏ Word —Ñ–∞–π–ª", type=["pdf", "docx"])
        if file:
            if file.type == "application/pdf":
                text = extract_text_from_pdf(file)
            elif file.type in ["application/vnd.openxmlformats-officedocument.wordprocessingml.document", "application/msword"]:
                text = extract_text_from_docx(file)
            st.text_area("–ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç", text, height=300)

    elif upload_method == "–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç":
        url = st.text_input("–í–≤–µ–¥–∏—Ç–µ URL")

        if "text_from_url" not in st.session_state:
            st.session_state["text_from_url"] = ""

        if st.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"):
            if url:
                extracted = extract_text_from_url(url)
                st.session_state["text_from_url"] = extracted

        text = st.session_state["text_from_url"]
        # –≤—Å–µ–≥–¥–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–ª–µ
        text = st.text_area("–ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç", text, height=300)

    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ"):
        graph_id = st.session_state.get("selected_graph")
        if graph_id is None:
            st.error("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–∞—Ñ –ø–µ—Ä–µ–¥ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ–º.")
            st.stop()
        clean_text = text.strip()
        if not clean_text:
            st.error("–¢–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π. –í–≤–µ–¥–∏—Ç–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ.")
            st.stop()
        try:
            graph_id = int(graph_id)
        except ValueError:
            st.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≥—Ä–∞—Ñ–∞.")
            st.stop()
        r = requests.post(f"{API_URL}/process_text/", json={
            "text": text,
            "graph_id": graph_id
        }, headers=auth_headers())

        if r.status_code == 200:
            task_id = r.json()["task_id"]
            st.success("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ü–æ–¥–æ–∂–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∞...")
            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ WebSocket
            asyncio.run(wait_for_graph_and_render(task_id, graph_id))
        else:
            st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–∞")

    # –ü–æ–∏—Å–∫
    st.subheader("üîé –ü–æ–∏—Å–∫ –ø–æ –≥—Ä–∞—Ñ—É")
    query = st.text_input("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å")
    if st.button("–ü–æ–∏—Å–∫"):

        #if is_token_expired(st.session_state.token):
        #    refresh_token = st.session_state.get("refresh_token") or cookies.get("refresh_token")
        #    if refresh_token:
        #        r = requests.post(f"{API_URL}/refresh", json={"refresh_token": refresh_token})
        #        if r.status_code == 200:
        #            new_token = r.json()["access_token"]
        #            save_token(new_token, refresh_token)
        #        else:
        #            st.warning("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.")
        #            clear_token()
        #            st.rerun()

        r = requests.post(f"{API_URL}/search/", json={
            "query": query,
            "graph_id": st.session_state.selected_graph
        }, headers=auth_headers())

        if r.status_code == 200:
            st.session_state.show_graph = True
            st.session_state.last_graph_id = st.session_state.selected_graph
            task_id = r.json()["task_id"]
            asyncio.run(wait_answer(task_id, st.session_state.selected_graph))

        else:
            st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞")
    if st.session_state.get("show_graph") and st.session_state.get("last_graph_id"):
        render_graph(st.session_state.last_graph_id, graph_placeholder)

elif page == "–ò—Å—Ç–æ—Ä–∏—è":
    st.subheader("üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤")
    r = requests.get(f"{API_URL}/history/", headers=auth_headers())
    if r.status_code == 200:
        history = r.json()
        if not history:
            st.info("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç–∞.")
        else:
            for item in history:
                dt = datetime.fromisoformat(item['created_at'])
                formatted_date = dt.strftime("%d.%m.%Y %H:%M")
                with st.expander(f"{formatted_date} ‚Äî üìò {item['graph_title']}"):
                    st.markdown(f"**üìù –ó–∞–ø—Ä–æ—Å:**\n\n{item['query']}")
                    st.markdown(f"**üß† –û—Ç–≤–µ—Ç:**\n\n{item['response']}")
    else:
        st.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏.")

elif page == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏" and st.session_state.get("is_admin"):
    st.subheader("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")

    r = requests.get(f"{API_URL}/users/", headers=auth_headers())
    if r.status_code == 200:
        users = r.json()
        if not users:
            st.info("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        else:
            for user in users:
                with st.expander(f"üë§ {user['username']} (id: {user['id']})"):
                    col1, col2 = st.columns([1, 2])
                    
                    with col1:
                        new_pass = st.text_input(f"–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è {user['username']}", type="password", key=f"pwd_{user['id']}")
                        if st.button(f"üîê –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å", key=f"chg_{user['id']}"):
                            if new_pass:
                                pwd_r = requests.post(
                                    f"{API_URL}/users/{user['id']}/password",
                                    json={"new_password": new_pass},
                                    headers=auth_headers()
                                )
                                if pwd_r.status_code == 200:
                                    st.success("–ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω")
                                else:
                                    st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è")
                            else:
                                st.warning("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å")

                    with col2:
                        if st.button(f"‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", key=f"del_{user['id']}"):
                            del_r = requests.delete(f"{API_URL}/users/{user['id']}", headers=auth_headers())
                            if del_r.status_code == 204:
                                st.success(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['username']} —É–¥–∞–ª—ë–Ω")
                                st.rerun()
                            else:
                                st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    else:
        st.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

# –ö–Ω–æ–ø–∫–∞ "–í—ã–π—Ç–∏" –≤–Ω–∏–∑—É sidebar
st.sidebar.markdown("---")
if st.sidebar.button("üö™ –í—ã–π—Ç–∏"):
    logout()